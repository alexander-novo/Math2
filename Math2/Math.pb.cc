// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Math.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Math.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MathHelper {

namespace {

const ::google::protobuf::Descriptor* Log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Log_reflection_ = NULL;
const ::google::protobuf::Descriptor* Log_Session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Log_Session_reflection_ = NULL;
const ::google::protobuf::Descriptor* Log_Session_Question_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Log_Session_Question_reflection_ = NULL;
const ::google::protobuf::Descriptor* Log_Options_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Log_Options_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Math_2eproto() {
  protobuf_AddDesc_Math_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Math.proto");
  GOOGLE_CHECK(file != NULL);
  Log_descriptor_ = file->message_type(0);
  static const int Log_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, hasseenhelp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, options_),
  };
  Log_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Log_descriptor_,
      Log::default_instance_,
      Log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _has_bits_[0]),
      -1,
      -1,
      sizeof(Log),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _internal_metadata_),
      -1);
  Log_Session_descriptor_ = Log_descriptor_->nested_type(0);
  static const int Log_Session_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session, endtime_),
  };
  Log_Session_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Log_Session_descriptor_,
      Log_Session::default_instance_,
      Log_Session_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session, _has_bits_[0]),
      -1,
      -1,
      sizeof(Log_Session),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session, _internal_metadata_),
      -1);
  Log_Session_Question_descriptor_ = Log_Session_descriptor_->nested_type(0);
  static const int Log_Session_Question_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, attempt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, correct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, correctpercent_),
  };
  Log_Session_Question_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Log_Session_Question_descriptor_,
      Log_Session_Question::default_instance_,
      Log_Session_Question_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, _has_bits_[0]),
      -1,
      -1,
      sizeof(Log_Session_Question),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Session_Question, _internal_metadata_),
      -1);
  Log_Options_descriptor_ = Log_descriptor_->nested_type(1);
  static const int Log_Options_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Options, maxtries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Options, numanswers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Options, remainform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Options, easymult_),
  };
  Log_Options_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Log_Options_descriptor_,
      Log_Options::default_instance_,
      Log_Options_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Options, _has_bits_[0]),
      -1,
      -1,
      sizeof(Log_Options),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log_Options, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Math_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Log_descriptor_, &Log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Log_Session_descriptor_, &Log_Session::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Log_Session_Question_descriptor_, &Log_Session_Question::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Log_Options_descriptor_, &Log_Options::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Math_2eproto() {
  delete Log::default_instance_;
  delete Log_reflection_;
  delete Log_Session::default_instance_;
  delete Log_Session_reflection_;
  delete Log_Session_Question::default_instance_;
  delete Log_Session_Question_reflection_;
  delete Log_Options::default_instance_;
  delete Log_Options_reflection_;
}

void protobuf_AddDesc_Math_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nMath.proto\022\nMathHelper\"\221\004\n\003Log\022\014\n\004name"
    "\030\001 \002(\t\022\032\n\013hasSeenHelp\030\002 \001(\010:\005false\022(\n\007se"
    "ssion\030\003 \003(\0132\027.MathHelper.Log.Session\022(\n\007"
    "options\030\004 \002(\0132\027.MathHelper.Log.Options\032\241"
    "\002\n\007Session\022\021\n\tstartTime\030\001 \002(\t\022\014\n\004seed\030\002 "
    "\002(\r\022\022\n\ndifficulty\030\003 \002(\r\0222\n\010question\030\004 \003("
    "\0132 .MathHelper.Log.Session.Question\022\017\n\007e"
    "ndTime\030\005 \002(\t\032\233\001\n\010Question\022\014\n\004time\030\001 \002(\t\022"
    "\t\n\001x\030\002 \002(\004\022\t\n\001y\030\003 \002(\004\022\021\n\toperation\030\004 \002(\t"
    "\022\016\n\006option\030\005 \003(\t\022\016\n\006answer\030\006 \002(\t\022\017\n\007atte"
    "mpt\030\007 \003(\r\022\017\n\007correct\030\010 \002(\010\022\026\n\016correctPer"
    "cent\030\t \002(\001\032h\n\007Options\022\023\n\010maxTries\030\001 \001(\r:"
    "\0013\022\025\n\nnumAnswers\030\002 \001(\r:\0014\022\031\n\nremainForm\030"
    "\003 \001(\010:\005false\022\026\n\010easyMult\030\004 \001(\010:\004true", 556);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Math.proto", &protobuf_RegisterTypes);
  Log::default_instance_ = new Log();
  Log_Session::default_instance_ = new Log_Session();
  Log_Session_Question::default_instance_ = new Log_Session_Question();
  Log_Options::default_instance_ = new Log_Options();
  Log::default_instance_->InitAsDefaultInstance();
  Log_Session::default_instance_->InitAsDefaultInstance();
  Log_Session_Question::default_instance_->InitAsDefaultInstance();
  Log_Options::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Math_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Math_2eproto {
  StaticDescriptorInitializer_Math_2eproto() {
    protobuf_AddDesc_Math_2eproto();
  }
} static_descriptor_initializer_Math_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log_Session_Question::kTimeFieldNumber;
const int Log_Session_Question::kXFieldNumber;
const int Log_Session_Question::kYFieldNumber;
const int Log_Session_Question::kOperationFieldNumber;
const int Log_Session_Question::kOptionFieldNumber;
const int Log_Session_Question::kAnswerFieldNumber;
const int Log_Session_Question::kAttemptFieldNumber;
const int Log_Session_Question::kCorrectFieldNumber;
const int Log_Session_Question::kCorrectPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log_Session_Question::Log_Session_Question()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MathHelper.Log.Session.Question)
}

void Log_Session_Question::InitAsDefaultInstance() {
}

Log_Session_Question::Log_Session_Question(const Log_Session_Question& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MathHelper.Log.Session.Question)
}

void Log_Session_Question::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = GOOGLE_ULONGLONG(0);
  y_ = GOOGLE_ULONGLONG(0);
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correct_ = false;
  correctpercent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Log_Session_Question::~Log_Session_Question() {
  // @@protoc_insertion_point(destructor:MathHelper.Log.Session.Question)
  SharedDtor();
}

void Log_Session_Question::SharedDtor() {
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Log_Session_Question::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log_Session_Question::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Log_Session_Question_descriptor_;
}

const Log_Session_Question& Log_Session_Question::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Math_2eproto();
  return *default_instance_;
}

Log_Session_Question* Log_Session_Question::default_instance_ = NULL;

Log_Session_Question* Log_Session_Question::New(::google::protobuf::Arena* arena) const {
  Log_Session_Question* n = new Log_Session_Question;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Log_Session_Question::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Log_Session_Question*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 175u) {
    ZR_(x_, y_);
    if (has_time()) {
      time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_operation()) {
      operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_answer()) {
      answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    correct_ = false;
  }
  correctpercent_ = 0;

#undef ZR_HELPER_
#undef ZR_

  option_.Clear();
  attempt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Log_Session_Question::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MathHelper.Log.Session.Question)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MathHelper.Log.Session.Question.time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint64 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint64 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_operation;
        break;
      }

      // required string operation = 4;
      case 4: {
        if (tag == 34) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MathHelper.Log.Session.Question.operation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_option;
        break;
      }

      // repeated string option = 5;
      case 5: {
        if (tag == 42) {
         parse_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_option()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->option(this->option_size() - 1).data(),
            this->option(this->option_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MathHelper.Log.Session.Question.option");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_option;
        if (input->ExpectTag(50)) goto parse_answer;
        break;
      }

      // required string answer = 6;
      case 6: {
        if (tag == 50) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MathHelper.Log.Session.Question.answer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_attempt;
        break;
      }

      // repeated uint32 attempt = 7;
      case 7: {
        if (tag == 56) {
         parse_attempt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_attempt())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attempt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_attempt;
        if (input->ExpectTag(64)) goto parse_correct;
        break;
      }

      // required bool correct = 8;
      case 8: {
        if (tag == 64) {
         parse_correct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_)));
          set_has_correct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_correctPercent;
        break;
      }

      // required double correctPercent = 9;
      case 9: {
        if (tag == 73) {
         parse_correctPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &correctpercent_)));
          set_has_correctpercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MathHelper.Log.Session.Question)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MathHelper.Log.Session.Question)
  return false;
#undef DO_
}

void Log_Session_Question::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MathHelper.Log.Session.Question)
  // required string time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.Question.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->time(), output);
  }

  // required uint64 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->x(), output);
  }

  // required uint64 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->y(), output);
  }

  // required string operation = 4;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.Question.operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->operation(), output);
  }

  // repeated string option = 5;
  for (int i = 0; i < this->option_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->option(i).data(), this->option(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.Question.option");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->option(i), output);
  }

  // required string answer = 6;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.Question.answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->answer(), output);
  }

  // repeated uint32 attempt = 7;
  for (int i = 0; i < this->attempt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->attempt(i), output);
  }

  // required bool correct = 8;
  if (has_correct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->correct(), output);
  }

  // required double correctPercent = 9;
  if (has_correctpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->correctpercent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MathHelper.Log.Session.Question)
}

::google::protobuf::uint8* Log_Session_Question::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MathHelper.Log.Session.Question)
  // required string time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.Question.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }

  // required uint64 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->x(), target);
  }

  // required uint64 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->y(), target);
  }

  // required string operation = 4;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.Question.operation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->operation(), target);
  }

  // repeated string option = 5;
  for (int i = 0; i < this->option_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->option(i).data(), this->option(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.Question.option");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->option(i), target);
  }

  // required string answer = 6;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.Question.answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->answer(), target);
  }

  // repeated uint32 attempt = 7;
  for (int i = 0; i < this->attempt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->attempt(i), target);
  }

  // required bool correct = 8;
  if (has_correct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->correct(), target);
  }

  // required double correctPercent = 9;
  if (has_correctpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->correctpercent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MathHelper.Log.Session.Question)
  return target;
}

int Log_Session_Question::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_time()) {
    // required string time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  if (has_x()) {
    // required uint64 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->x());
  }

  if (has_y()) {
    // required uint64 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->y());
  }

  if (has_operation()) {
    // required string operation = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation());
  }

  if (has_answer()) {
    // required string answer = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->answer());
  }

  if (has_correct()) {
    // required bool correct = 8;
    total_size += 1 + 1;
  }

  if (has_correctpercent()) {
    // required double correctPercent = 9;
    total_size += 1 + 8;
  }

  return total_size;
}
int Log_Session_Question::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001af) ^ 0x000001af) == 0) {  // All required fields are present.
    // required string time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());

    // required uint64 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->x());

    // required uint64 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->y());

    // required string operation = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation());

    // required string answer = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->answer());

    // required bool correct = 8;
    total_size += 1 + 1;

    // required double correctPercent = 9;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string option = 5;
  total_size += 1 * this->option_size();
  for (int i = 0; i < this->option_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->option(i));
  }

  // repeated uint32 attempt = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->attempt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attempt(i));
    }
    total_size += 1 * this->attempt_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log_Session_Question::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Log_Session_Question* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Log_Session_Question>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Log_Session_Question::MergeFrom(const Log_Session_Question& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  option_.MergeFrom(from.option_);
  attempt_.MergeFrom(from.attempt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_has_time();
      time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_operation()) {
      set_has_operation();
      operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
    }
    if (from.has_answer()) {
      set_has_answer();
      answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
    }
    if (from.has_correct()) {
      set_correct(from.correct());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_correctpercent()) {
      set_correctpercent(from.correctpercent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Log_Session_Question::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log_Session_Question::CopyFrom(const Log_Session_Question& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log_Session_Question::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001af) != 0x000001af) return false;

  return true;
}

void Log_Session_Question::Swap(Log_Session_Question* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log_Session_Question::InternalSwap(Log_Session_Question* other) {
  time_.Swap(&other->time_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  operation_.Swap(&other->operation_);
  option_.UnsafeArenaSwap(&other->option_);
  answer_.Swap(&other->answer_);
  attempt_.UnsafeArenaSwap(&other->attempt_);
  std::swap(correct_, other->correct_);
  std::swap(correctpercent_, other->correctpercent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Log_Session_Question::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Log_Session_Question_descriptor_;
  metadata.reflection = Log_Session_Question_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log_Session::kStartTimeFieldNumber;
const int Log_Session::kSeedFieldNumber;
const int Log_Session::kDifficultyFieldNumber;
const int Log_Session::kQuestionFieldNumber;
const int Log_Session::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log_Session::Log_Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MathHelper.Log.Session)
}

void Log_Session::InitAsDefaultInstance() {
}

Log_Session::Log_Session(const Log_Session& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MathHelper.Log.Session)
}

void Log_Session::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seed_ = 0u;
  difficulty_ = 0u;
  endtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Log_Session::~Log_Session() {
  // @@protoc_insertion_point(destructor:MathHelper.Log.Session)
  SharedDtor();
}

void Log_Session::SharedDtor() {
  starttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Log_Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log_Session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Log_Session_descriptor_;
}

const Log_Session& Log_Session::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Math_2eproto();
  return *default_instance_;
}

Log_Session* Log_Session::default_instance_ = NULL;

Log_Session* Log_Session::New(::google::protobuf::Arena* arena) const {
  Log_Session* n = new Log_Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Log_Session::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Log_Session*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 23u) {
    ZR_(seed_, difficulty_);
    if (has_starttime()) {
      starttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_endtime()) {
      endtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  question_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Log_Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MathHelper.Log.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string startTime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starttime().data(), this->starttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MathHelper.Log.Session.startTime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seed;
        break;
      }

      // required uint32 seed = 2;
      case 2: {
        if (tag == 16) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty;
        break;
      }

      // required uint32 difficulty = 3;
      case 3: {
        if (tag == 24) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_question;
        break;
      }

      // repeated .MathHelper.Log.Session.Question question = 4;
      case 4: {
        if (tag == 34) {
         parse_question:
          DO_(input->IncrementRecursionDepth());
         parse_loop_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_question()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_question;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_endTime;
        break;
      }

      // required string endTime = 5;
      case 5: {
        if (tag == 42) {
         parse_endTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endtime().data(), this->endtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MathHelper.Log.Session.endTime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MathHelper.Log.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MathHelper.Log.Session)
  return false;
#undef DO_
}

void Log_Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MathHelper.Log.Session)
  // required string startTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.startTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->starttime(), output);
  }

  // required uint32 seed = 2;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seed(), output);
  }

  // required uint32 difficulty = 3;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // repeated .MathHelper.Log.Session.Question question = 4;
  for (unsigned int i = 0, n = this->question_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->question(i), output);
  }

  // required string endTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.endTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->endtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MathHelper.Log.Session)
}

::google::protobuf::uint8* Log_Session::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MathHelper.Log.Session)
  // required string startTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starttime().data(), this->starttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.startTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->starttime(), target);
  }

  // required uint32 seed = 2;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seed(), target);
  }

  // required uint32 difficulty = 3;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // repeated .MathHelper.Log.Session.Question question = 4;
  for (unsigned int i = 0, n = this->question_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->question(i), target);
  }

  // required string endTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endtime().data(), this->endtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.Session.endTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->endtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MathHelper.Log.Session)
  return target;
}

int Log_Session::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_starttime()) {
    // required string startTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->starttime());
  }

  if (has_seed()) {
    // required uint32 seed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seed());
  }

  if (has_difficulty()) {
    // required uint32 difficulty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  if (has_endtime()) {
    // required string endTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->endtime());
  }

  return total_size;
}
int Log_Session::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required string startTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->starttime());

    // required uint32 seed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seed());

    // required uint32 difficulty = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());

    // required string endTime = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->endtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .MathHelper.Log.Session.Question question = 4;
  total_size += 1 * this->question_size();
  for (int i = 0; i < this->question_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->question(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log_Session::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Log_Session* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Log_Session>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Log_Session::MergeFrom(const Log_Session& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  question_.MergeFrom(from.question_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_has_starttime();
      starttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.starttime_);
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_endtime()) {
      set_has_endtime();
      endtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endtime_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Log_Session::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log_Session::CopyFrom(const Log_Session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log_Session::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->question())) return false;
  return true;
}

void Log_Session::Swap(Log_Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log_Session::InternalSwap(Log_Session* other) {
  starttime_.Swap(&other->starttime_);
  std::swap(seed_, other->seed_);
  std::swap(difficulty_, other->difficulty_);
  question_.UnsafeArenaSwap(&other->question_);
  endtime_.Swap(&other->endtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Log_Session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Log_Session_descriptor_;
  metadata.reflection = Log_Session_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log_Options::kMaxTriesFieldNumber;
const int Log_Options::kNumAnswersFieldNumber;
const int Log_Options::kRemainFormFieldNumber;
const int Log_Options::kEasyMultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log_Options::Log_Options()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MathHelper.Log.Options)
}

void Log_Options::InitAsDefaultInstance() {
}

Log_Options::Log_Options(const Log_Options& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MathHelper.Log.Options)
}

void Log_Options::SharedCtor() {
  _cached_size_ = 0;
  maxtries_ = 3u;
  numanswers_ = 4u;
  remainform_ = false;
  easymult_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Log_Options::~Log_Options() {
  // @@protoc_insertion_point(destructor:MathHelper.Log.Options)
  SharedDtor();
}

void Log_Options::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Log_Options::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log_Options::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Log_Options_descriptor_;
}

const Log_Options& Log_Options::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Math_2eproto();
  return *default_instance_;
}

Log_Options* Log_Options::default_instance_ = NULL;

Log_Options* Log_Options::New(::google::protobuf::Arena* arena) const {
  Log_Options* n = new Log_Options;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Log_Options::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    maxtries_ = 3u;
    numanswers_ = 4u;
    remainform_ = false;
    easymult_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Log_Options::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MathHelper.Log.Options)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxTries = 1 [default = 3];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtries_)));
          set_has_maxtries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numAnswers;
        break;
      }

      // optional uint32 numAnswers = 2 [default = 4];
      case 2: {
        if (tag == 16) {
         parse_numAnswers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numanswers_)));
          set_has_numanswers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remainForm;
        break;
      }

      // optional bool remainForm = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_remainForm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remainform_)));
          set_has_remainform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_easyMult;
        break;
      }

      // optional bool easyMult = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_easyMult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &easymult_)));
          set_has_easymult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MathHelper.Log.Options)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MathHelper.Log.Options)
  return false;
#undef DO_
}

void Log_Options::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MathHelper.Log.Options)
  // optional uint32 maxTries = 1 [default = 3];
  if (has_maxtries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxtries(), output);
  }

  // optional uint32 numAnswers = 2 [default = 4];
  if (has_numanswers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->numanswers(), output);
  }

  // optional bool remainForm = 3 [default = false];
  if (has_remainform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->remainform(), output);
  }

  // optional bool easyMult = 4 [default = true];
  if (has_easymult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->easymult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MathHelper.Log.Options)
}

::google::protobuf::uint8* Log_Options::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MathHelper.Log.Options)
  // optional uint32 maxTries = 1 [default = 3];
  if (has_maxtries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxtries(), target);
  }

  // optional uint32 numAnswers = 2 [default = 4];
  if (has_numanswers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->numanswers(), target);
  }

  // optional bool remainForm = 3 [default = false];
  if (has_remainform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->remainform(), target);
  }

  // optional bool easyMult = 4 [default = true];
  if (has_easymult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->easymult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MathHelper.Log.Options)
  return target;
}

int Log_Options::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 maxTries = 1 [default = 3];
    if (has_maxtries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtries());
    }

    // optional uint32 numAnswers = 2 [default = 4];
    if (has_numanswers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numanswers());
    }

    // optional bool remainForm = 3 [default = false];
    if (has_remainform()) {
      total_size += 1 + 1;
    }

    // optional bool easyMult = 4 [default = true];
    if (has_easymult()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log_Options::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Log_Options* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Log_Options>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Log_Options::MergeFrom(const Log_Options& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxtries()) {
      set_maxtries(from.maxtries());
    }
    if (from.has_numanswers()) {
      set_numanswers(from.numanswers());
    }
    if (from.has_remainform()) {
      set_remainform(from.remainform());
    }
    if (from.has_easymult()) {
      set_easymult(from.easymult());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Log_Options::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log_Options::CopyFrom(const Log_Options& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log_Options::IsInitialized() const {

  return true;
}

void Log_Options::Swap(Log_Options* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log_Options::InternalSwap(Log_Options* other) {
  std::swap(maxtries_, other->maxtries_);
  std::swap(numanswers_, other->numanswers_);
  std::swap(remainform_, other->remainform_);
  std::swap(easymult_, other->easymult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Log_Options::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Log_Options_descriptor_;
  metadata.reflection = Log_Options_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log::kNameFieldNumber;
const int Log::kHasSeenHelpFieldNumber;
const int Log::kSessionFieldNumber;
const int Log::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log::Log()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MathHelper.Log)
}

void Log::InitAsDefaultInstance() {
  options_ = const_cast< ::MathHelper::Log_Options*>(&::MathHelper::Log_Options::default_instance());
}

Log::Log(const Log& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MathHelper.Log)
}

void Log::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hasseenhelp_ = false;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:MathHelper.Log)
  SharedDtor();
}

void Log::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete options_;
  }
}

void Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Log_descriptor_;
}

const Log& Log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Math_2eproto();
  return *default_instance_;
}

Log* Log::default_instance_ = NULL;

Log* Log::New(::google::protobuf::Arena* arena) const {
  Log* n = new Log;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Log::Clear() {
  if (_has_bits_[0 / 32] & 11u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    hasseenhelp_ = false;
    if (has_options()) {
      if (options_ != NULL) options_->::MathHelper::Log_Options::Clear();
    }
  }
  session_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MathHelper.Log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MathHelper.Log.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hasSeenHelp;
        break;
      }

      // optional bool hasSeenHelp = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_hasSeenHelp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasseenhelp_)));
          set_has_hasseenhelp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_session;
        break;
      }

      // repeated .MathHelper.Log.Session session = 3;
      case 3: {
        if (tag == 26) {
         parse_session:
          DO_(input->IncrementRecursionDepth());
         parse_loop_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_session;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_options;
        break;
      }

      // required .MathHelper.Log.Options options = 4;
      case 4: {
        if (tag == 34) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MathHelper.Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MathHelper.Log)
  return false;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MathHelper.Log)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool hasSeenHelp = 2 [default = false];
  if (has_hasseenhelp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasseenhelp(), output);
  }

  // repeated .MathHelper.Log.Session session = 3;
  for (unsigned int i = 0, n = this->session_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->session(i), output);
  }

  // required .MathHelper.Log.Options options = 4;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->options_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MathHelper.Log)
}

::google::protobuf::uint8* Log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MathHelper.Log)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MathHelper.Log.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool hasSeenHelp = 2 [default = false];
  if (has_hasseenhelp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasseenhelp(), target);
  }

  // repeated .MathHelper.Log.Session session = 3;
  for (unsigned int i = 0, n = this->session_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->session(i), target);
  }

  // required .MathHelper.Log.Options options = 4;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->options_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MathHelper.Log)
  return target;
}

int Log::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_options()) {
    // required .MathHelper.Log.Options options = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  return total_size;
}
int Log::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .MathHelper.Log.Options options = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool hasSeenHelp = 2 [default = false];
  if (has_hasseenhelp()) {
    total_size += 1 + 1;
  }

  // repeated .MathHelper.Log.Session session = 3;
  total_size += 1 * this->session_size();
  for (int i = 0; i < this->session_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->session(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Log* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Log>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  session_.MergeFrom(from.session_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_hasseenhelp()) {
      set_hasseenhelp(from.hasseenhelp());
    }
    if (from.has_options()) {
      mutable_options()->::MathHelper::Log_Options::MergeFrom(from.options());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->session())) return false;
  return true;
}

void Log::Swap(Log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log::InternalSwap(Log* other) {
  name_.Swap(&other->name_);
  std::swap(hasseenhelp_, other->hasseenhelp_);
  session_.UnsafeArenaSwap(&other->session_);
  std::swap(options_, other->options_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Log_descriptor_;
  metadata.reflection = Log_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Log_Session_Question

// required string time = 1;
bool Log_Session_Question::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Log_Session_Question::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Log_Session_Question::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Log_Session_Question::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
 const ::std::string& Log_Session_Question::time() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.Question.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session_Question::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.Question.time)
}
 void Log_Session_Question::set_time(const char* value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MathHelper.Log.Session.Question.time)
}
 void Log_Session_Question::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MathHelper.Log.Session.Question.time)
}
 ::std::string* Log_Session_Question::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.Session.Question.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Log_Session_Question::release_time() {
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session_Question::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:MathHelper.Log.Session.Question.time)
}

// required uint64 x = 2;
bool Log_Session_Question::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Log_Session_Question::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void Log_Session_Question::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void Log_Session_Question::clear_x() {
  x_ = GOOGLE_ULONGLONG(0);
  clear_has_x();
}
 ::google::protobuf::uint64 Log_Session_Question::x() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.Question.x)
  return x_;
}
 void Log_Session_Question::set_x(::google::protobuf::uint64 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.Question.x)
}

// required uint64 y = 3;
bool Log_Session_Question::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Log_Session_Question::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void Log_Session_Question::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void Log_Session_Question::clear_y() {
  y_ = GOOGLE_ULONGLONG(0);
  clear_has_y();
}
 ::google::protobuf::uint64 Log_Session_Question::y() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.Question.y)
  return y_;
}
 void Log_Session_Question::set_y(::google::protobuf::uint64 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.Question.y)
}

// required string operation = 4;
bool Log_Session_Question::has_operation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Log_Session_Question::set_has_operation() {
  _has_bits_[0] |= 0x00000008u;
}
void Log_Session_Question::clear_has_operation() {
  _has_bits_[0] &= ~0x00000008u;
}
void Log_Session_Question::clear_operation() {
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operation();
}
 const ::std::string& Log_Session_Question::operation() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.Question.operation)
  return operation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session_Question::set_operation(const ::std::string& value) {
  set_has_operation();
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.Question.operation)
}
 void Log_Session_Question::set_operation(const char* value) {
  set_has_operation();
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MathHelper.Log.Session.Question.operation)
}
 void Log_Session_Question::set_operation(const char* value, size_t size) {
  set_has_operation();
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MathHelper.Log.Session.Question.operation)
}
 ::std::string* Log_Session_Question::mutable_operation() {
  set_has_operation();
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.Session.Question.operation)
  return operation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Log_Session_Question::release_operation() {
  clear_has_operation();
  return operation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session_Question::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    set_has_operation();
  } else {
    clear_has_operation();
  }
  operation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation);
  // @@protoc_insertion_point(field_set_allocated:MathHelper.Log.Session.Question.operation)
}

// repeated string option = 5;
int Log_Session_Question::option_size() const {
  return option_.size();
}
void Log_Session_Question::clear_option() {
  option_.Clear();
}
 const ::std::string& Log_Session_Question::option(int index) const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.Question.option)
  return option_.Get(index);
}
 ::std::string* Log_Session_Question::mutable_option(int index) {
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.Session.Question.option)
  return option_.Mutable(index);
}
 void Log_Session_Question::set_option(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.Question.option)
  option_.Mutable(index)->assign(value);
}
 void Log_Session_Question::set_option(int index, const char* value) {
  option_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MathHelper.Log.Session.Question.option)
}
 void Log_Session_Question::set_option(int index, const char* value, size_t size) {
  option_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MathHelper.Log.Session.Question.option)
}
 ::std::string* Log_Session_Question::add_option() {
  return option_.Add();
}
 void Log_Session_Question::add_option(const ::std::string& value) {
  option_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MathHelper.Log.Session.Question.option)
}
 void Log_Session_Question::add_option(const char* value) {
  option_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MathHelper.Log.Session.Question.option)
}
 void Log_Session_Question::add_option(const char* value, size_t size) {
  option_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MathHelper.Log.Session.Question.option)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Log_Session_Question::option() const {
  // @@protoc_insertion_point(field_list:MathHelper.Log.Session.Question.option)
  return option_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Log_Session_Question::mutable_option() {
  // @@protoc_insertion_point(field_mutable_list:MathHelper.Log.Session.Question.option)
  return &option_;
}

// required string answer = 6;
bool Log_Session_Question::has_answer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Log_Session_Question::set_has_answer() {
  _has_bits_[0] |= 0x00000020u;
}
void Log_Session_Question::clear_has_answer() {
  _has_bits_[0] &= ~0x00000020u;
}
void Log_Session_Question::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_answer();
}
 const ::std::string& Log_Session_Question::answer() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.Question.answer)
  return answer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session_Question::set_answer(const ::std::string& value) {
  set_has_answer();
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.Question.answer)
}
 void Log_Session_Question::set_answer(const char* value) {
  set_has_answer();
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MathHelper.Log.Session.Question.answer)
}
 void Log_Session_Question::set_answer(const char* value, size_t size) {
  set_has_answer();
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MathHelper.Log.Session.Question.answer)
}
 ::std::string* Log_Session_Question::mutable_answer() {
  set_has_answer();
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.Session.Question.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Log_Session_Question::release_answer() {
  clear_has_answer();
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session_Question::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    set_has_answer();
  } else {
    clear_has_answer();
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:MathHelper.Log.Session.Question.answer)
}

// repeated uint32 attempt = 7;
int Log_Session_Question::attempt_size() const {
  return attempt_.size();
}
void Log_Session_Question::clear_attempt() {
  attempt_.Clear();
}
 ::google::protobuf::uint32 Log_Session_Question::attempt(int index) const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.Question.attempt)
  return attempt_.Get(index);
}
 void Log_Session_Question::set_attempt(int index, ::google::protobuf::uint32 value) {
  attempt_.Set(index, value);
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.Question.attempt)
}
 void Log_Session_Question::add_attempt(::google::protobuf::uint32 value) {
  attempt_.Add(value);
  // @@protoc_insertion_point(field_add:MathHelper.Log.Session.Question.attempt)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Log_Session_Question::attempt() const {
  // @@protoc_insertion_point(field_list:MathHelper.Log.Session.Question.attempt)
  return attempt_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Log_Session_Question::mutable_attempt() {
  // @@protoc_insertion_point(field_mutable_list:MathHelper.Log.Session.Question.attempt)
  return &attempt_;
}

// required bool correct = 8;
bool Log_Session_Question::has_correct() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Log_Session_Question::set_has_correct() {
  _has_bits_[0] |= 0x00000080u;
}
void Log_Session_Question::clear_has_correct() {
  _has_bits_[0] &= ~0x00000080u;
}
void Log_Session_Question::clear_correct() {
  correct_ = false;
  clear_has_correct();
}
 bool Log_Session_Question::correct() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.Question.correct)
  return correct_;
}
 void Log_Session_Question::set_correct(bool value) {
  set_has_correct();
  correct_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.Question.correct)
}

// required double correctPercent = 9;
bool Log_Session_Question::has_correctpercent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Log_Session_Question::set_has_correctpercent() {
  _has_bits_[0] |= 0x00000100u;
}
void Log_Session_Question::clear_has_correctpercent() {
  _has_bits_[0] &= ~0x00000100u;
}
void Log_Session_Question::clear_correctpercent() {
  correctpercent_ = 0;
  clear_has_correctpercent();
}
 double Log_Session_Question::correctpercent() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.Question.correctPercent)
  return correctpercent_;
}
 void Log_Session_Question::set_correctpercent(double value) {
  set_has_correctpercent();
  correctpercent_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.Question.correctPercent)
}

// -------------------------------------------------------------------

// Log_Session

// required string startTime = 1;
bool Log_Session::has_starttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Log_Session::set_has_starttime() {
  _has_bits_[0] |= 0x00000001u;
}
void Log_Session::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000001u;
}
void Log_Session::clear_starttime() {
  starttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_starttime();
}
 const ::std::string& Log_Session::starttime() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.startTime)
  return starttime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session::set_starttime(const ::std::string& value) {
  set_has_starttime();
  starttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.startTime)
}
 void Log_Session::set_starttime(const char* value) {
  set_has_starttime();
  starttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MathHelper.Log.Session.startTime)
}
 void Log_Session::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  starttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MathHelper.Log.Session.startTime)
}
 ::std::string* Log_Session::mutable_starttime() {
  set_has_starttime();
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.Session.startTime)
  return starttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Log_Session::release_starttime() {
  clear_has_starttime();
  return starttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session::set_allocated_starttime(::std::string* starttime) {
  if (starttime != NULL) {
    set_has_starttime();
  } else {
    clear_has_starttime();
  }
  starttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), starttime);
  // @@protoc_insertion_point(field_set_allocated:MathHelper.Log.Session.startTime)
}

// required uint32 seed = 2;
bool Log_Session::has_seed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Log_Session::set_has_seed() {
  _has_bits_[0] |= 0x00000002u;
}
void Log_Session::clear_has_seed() {
  _has_bits_[0] &= ~0x00000002u;
}
void Log_Session::clear_seed() {
  seed_ = 0u;
  clear_has_seed();
}
 ::google::protobuf::uint32 Log_Session::seed() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.seed)
  return seed_;
}
 void Log_Session::set_seed(::google::protobuf::uint32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.seed)
}

// required uint32 difficulty = 3;
bool Log_Session::has_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Log_Session::set_has_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
void Log_Session::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
void Log_Session::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
 ::google::protobuf::uint32 Log_Session::difficulty() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.difficulty)
  return difficulty_;
}
 void Log_Session::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.difficulty)
}

// repeated .MathHelper.Log.Session.Question question = 4;
int Log_Session::question_size() const {
  return question_.size();
}
void Log_Session::clear_question() {
  question_.Clear();
}
const ::MathHelper::Log_Session_Question& Log_Session::question(int index) const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.question)
  return question_.Get(index);
}
::MathHelper::Log_Session_Question* Log_Session::mutable_question(int index) {
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.Session.question)
  return question_.Mutable(index);
}
::MathHelper::Log_Session_Question* Log_Session::add_question() {
  // @@protoc_insertion_point(field_add:MathHelper.Log.Session.question)
  return question_.Add();
}
::google::protobuf::RepeatedPtrField< ::MathHelper::Log_Session_Question >*
Log_Session::mutable_question() {
  // @@protoc_insertion_point(field_mutable_list:MathHelper.Log.Session.question)
  return &question_;
}
const ::google::protobuf::RepeatedPtrField< ::MathHelper::Log_Session_Question >&
Log_Session::question() const {
  // @@protoc_insertion_point(field_list:MathHelper.Log.Session.question)
  return question_;
}

// required string endTime = 5;
bool Log_Session::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Log_Session::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
void Log_Session::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void Log_Session::clear_endtime() {
  endtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endtime();
}
 const ::std::string& Log_Session::endtime() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Session.endTime)
  return endtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session::set_endtime(const ::std::string& value) {
  set_has_endtime();
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MathHelper.Log.Session.endTime)
}
 void Log_Session::set_endtime(const char* value) {
  set_has_endtime();
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MathHelper.Log.Session.endTime)
}
 void Log_Session::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  endtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MathHelper.Log.Session.endTime)
}
 ::std::string* Log_Session::mutable_endtime() {
  set_has_endtime();
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.Session.endTime)
  return endtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Log_Session::release_endtime() {
  clear_has_endtime();
  return endtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log_Session::set_allocated_endtime(::std::string* endtime) {
  if (endtime != NULL) {
    set_has_endtime();
  } else {
    clear_has_endtime();
  }
  endtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endtime);
  // @@protoc_insertion_point(field_set_allocated:MathHelper.Log.Session.endTime)
}

// -------------------------------------------------------------------

// Log_Options

// optional uint32 maxTries = 1 [default = 3];
bool Log_Options::has_maxtries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Log_Options::set_has_maxtries() {
  _has_bits_[0] |= 0x00000001u;
}
void Log_Options::clear_has_maxtries() {
  _has_bits_[0] &= ~0x00000001u;
}
void Log_Options::clear_maxtries() {
  maxtries_ = 3u;
  clear_has_maxtries();
}
 ::google::protobuf::uint32 Log_Options::maxtries() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Options.maxTries)
  return maxtries_;
}
 void Log_Options::set_maxtries(::google::protobuf::uint32 value) {
  set_has_maxtries();
  maxtries_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Options.maxTries)
}

// optional uint32 numAnswers = 2 [default = 4];
bool Log_Options::has_numanswers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Log_Options::set_has_numanswers() {
  _has_bits_[0] |= 0x00000002u;
}
void Log_Options::clear_has_numanswers() {
  _has_bits_[0] &= ~0x00000002u;
}
void Log_Options::clear_numanswers() {
  numanswers_ = 4u;
  clear_has_numanswers();
}
 ::google::protobuf::uint32 Log_Options::numanswers() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Options.numAnswers)
  return numanswers_;
}
 void Log_Options::set_numanswers(::google::protobuf::uint32 value) {
  set_has_numanswers();
  numanswers_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Options.numAnswers)
}

// optional bool remainForm = 3 [default = false];
bool Log_Options::has_remainform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Log_Options::set_has_remainform() {
  _has_bits_[0] |= 0x00000004u;
}
void Log_Options::clear_has_remainform() {
  _has_bits_[0] &= ~0x00000004u;
}
void Log_Options::clear_remainform() {
  remainform_ = false;
  clear_has_remainform();
}
 bool Log_Options::remainform() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Options.remainForm)
  return remainform_;
}
 void Log_Options::set_remainform(bool value) {
  set_has_remainform();
  remainform_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Options.remainForm)
}

// optional bool easyMult = 4 [default = true];
bool Log_Options::has_easymult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Log_Options::set_has_easymult() {
  _has_bits_[0] |= 0x00000008u;
}
void Log_Options::clear_has_easymult() {
  _has_bits_[0] &= ~0x00000008u;
}
void Log_Options::clear_easymult() {
  easymult_ = true;
  clear_has_easymult();
}
 bool Log_Options::easymult() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.Options.easyMult)
  return easymult_;
}
 void Log_Options::set_easymult(bool value) {
  set_has_easymult();
  easymult_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.Options.easyMult)
}

// -------------------------------------------------------------------

// Log

// required string name = 1;
bool Log::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Log::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Log::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Log::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Log::name() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MathHelper.Log.name)
}
 void Log::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MathHelper.Log.name)
}
 void Log::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MathHelper.Log.name)
}
 ::std::string* Log::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Log::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Log::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MathHelper.Log.name)
}

// optional bool hasSeenHelp = 2 [default = false];
bool Log::has_hasseenhelp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Log::set_has_hasseenhelp() {
  _has_bits_[0] |= 0x00000002u;
}
void Log::clear_has_hasseenhelp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Log::clear_hasseenhelp() {
  hasseenhelp_ = false;
  clear_has_hasseenhelp();
}
 bool Log::hasseenhelp() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.hasSeenHelp)
  return hasseenhelp_;
}
 void Log::set_hasseenhelp(bool value) {
  set_has_hasseenhelp();
  hasseenhelp_ = value;
  // @@protoc_insertion_point(field_set:MathHelper.Log.hasSeenHelp)
}

// repeated .MathHelper.Log.Session session = 3;
int Log::session_size() const {
  return session_.size();
}
void Log::clear_session() {
  session_.Clear();
}
const ::MathHelper::Log_Session& Log::session(int index) const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.session)
  return session_.Get(index);
}
::MathHelper::Log_Session* Log::mutable_session(int index) {
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.session)
  return session_.Mutable(index);
}
::MathHelper::Log_Session* Log::add_session() {
  // @@protoc_insertion_point(field_add:MathHelper.Log.session)
  return session_.Add();
}
::google::protobuf::RepeatedPtrField< ::MathHelper::Log_Session >*
Log::mutable_session() {
  // @@protoc_insertion_point(field_mutable_list:MathHelper.Log.session)
  return &session_;
}
const ::google::protobuf::RepeatedPtrField< ::MathHelper::Log_Session >&
Log::session() const {
  // @@protoc_insertion_point(field_list:MathHelper.Log.session)
  return session_;
}

// required .MathHelper.Log.Options options = 4;
bool Log::has_options() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Log::set_has_options() {
  _has_bits_[0] |= 0x00000008u;
}
void Log::clear_has_options() {
  _has_bits_[0] &= ~0x00000008u;
}
void Log::clear_options() {
  if (options_ != NULL) options_->::MathHelper::Log_Options::Clear();
  clear_has_options();
}
const ::MathHelper::Log_Options& Log::options() const {
  // @@protoc_insertion_point(field_get:MathHelper.Log.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
::MathHelper::Log_Options* Log::mutable_options() {
  set_has_options();
  if (options_ == NULL) {
    options_ = new ::MathHelper::Log_Options;
  }
  // @@protoc_insertion_point(field_mutable:MathHelper.Log.options)
  return options_;
}
::MathHelper::Log_Options* Log::release_options() {
  clear_has_options();
  ::MathHelper::Log_Options* temp = options_;
  options_ = NULL;
  return temp;
}
void Log::set_allocated_options(::MathHelper::Log_Options* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:MathHelper.Log.options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MathHelper

// @@protoc_insertion_point(global_scope)
